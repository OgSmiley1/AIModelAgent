#!/usr/bin/env python3
"""
Project Export Tool
Creates a downloadable zip file with all project files and conversation history
"""

import os
import zipfile
import json
from datetime import datetime
import shutil

def create_conversation_log():
    """Create a comprehensive conversation log"""
    conversation_log = {
        "project_title": "CRC Sales & Lead Warroom - Luxury Watch Management System",
        "export_date": datetime.now().isoformat(),
        "project_description": "Advanced mobile-responsive luxury watch sales and lead management system with WhatsApp integration, client profile management, and AI-powered sales intelligence.",
        
        "key_features_implemented": [
            "Complete client profile management with PostgreSQL database (40+ fields)",
            "Advanced sales pipeline tracking (New Lead ‚Üí Qualified ‚Üí Presentation ‚Üí Negotiation ‚Üí Closed)",
            "WhatsApp Business API integration with silent message analysis",
            "Real-time conversation analysis and client intelligence",
            "Progressive Web App (PWA) for mobile installation",
            "Vacheron Constantin luxury brand styling",
            "Comprehensive KPI dashboard",
            "Secure authentication system (Username: CRC, Password: Smile123)",
            "Multi-source data integration (Excel, CSV uploads)",
            "Automated client profile creation from WhatsApp interactions"
        ],
        
        "technical_architecture": {
            "backend": "Python Flask with modular service architecture",
            "database": "PostgreSQL for client profiles and data persistence",
            "frontend": "Bootstrap 5.3 with responsive design and PWA capabilities",
            "integrations": "WhatsApp Business API, Excel/CSV processing",
            "authentication": "Session-based with secure login system",
            "deployment": "Replit-optimized with auto-scaling capabilities"
        },
        
        "conversation_summary": [
            {
                "phase": "Initial Setup",
                "description": "Established project requirements for luxury watch sales management system with WhatsApp integration and mobile-first design"
            },
            {
                "phase": "WhatsApp Integration",
                "description": "Implemented direct WhatsApp Business API integration with webhook processing and disabled auto-responses per user requirement"
            },
            {
                "phase": "Client Profile System",
                "description": "Built comprehensive client management with PostgreSQL database, 40+ profile fields, pipeline tracking, and detailed profile views"
            },
            {
                "phase": "Database Integration",
                "description": "Created PostgreSQL database with client profiles table and loaded sample data with 3 example clients"
            },
            {
                "phase": "Auto-Profile Creation",
                "description": "Enhanced WhatsApp integration to automatically create and update client profiles from message analysis"
            }
        ],
        
        "user_requirements_fulfilled": [
            "‚úì Complete deactivation of WhatsApp auto-responses",
            "‚úì Silent message analysis without client notifications",
            "‚úì Comprehensive client profile management system",
            "‚úì Full CRUD operations for client data",
            "‚úì Sales pipeline tracking with visual stages",
            "‚úì Watch preferences and luxury indicators tracking",
            "‚úì Team assignment and action planning",
            "‚úì VIP client designation system",
            "‚úì Mobile-responsive Progressive Web App",
            "‚úì Vacheron Constantin brand styling",
            "‚úì PostgreSQL database integration",
            "‚úì Sample data with realistic client examples"
        ],
        
        "next_steps_recommended": [
            "Get fresh WhatsApp access token from Meta Developer Console",
            "Test WhatsApp message sending to user number +971509509587",
            "Add more client profiles through the management interface",
            "Customize pipeline stages and deal values as needed",
            "Deploy to production environment when ready"
        ],
        
        "system_status": {
            "whatsapp_webhook": "Active and ready to receive messages",
            "client_database": "Operational with 3 sample clients loaded",
            "authentication": "Secure login system active (CRC/Smile123)",
            "pwa_installation": "Ready for iOS, Android, and desktop installation",
            "auto_responses": "DISABLED - Messages analyzed silently only"
        }
    }
    
    return conversation_log

def create_project_zip():
    """Create a comprehensive zip file with all project files"""
    
    # Create conversation log
    conversation_log = create_conversation_log()
    
    # Write conversation log to file
    with open('conversation_log.json', 'w') as f:
        json.dump(conversation_log, f, indent=2)
    
    # Create README for the export
    readme_content = """# CRC Sales & Lead Warroom - Project Export

## Project Overview
This is a complete export of the CRC Sales & Lead Warroom luxury watch management system.

## What's Included
- All source code files
- Database models and configurations
- Templates and static assets
- WhatsApp integration components
- Client profile management system
- Conversation analysis tools
- Complete conversation log and documentation

## Key Features
- Advanced client profile management with PostgreSQL
- WhatsApp Business API integration (silent analysis mode)
- Sales pipeline tracking and management
- Progressive Web App (PWA) capabilities
- Vacheron Constantin luxury brand styling
- Real-time conversation analysis and insights

## Setup Instructions
1. Install dependencies: `pip install -r requirements.txt`
2. Set up PostgreSQL database using DATABASE_URL environment variable
3. Configure WhatsApp Business API credentials
4. Run the application: `python app.py`
5. Login with: Username: CRC, Password: Smile123

## Architecture
- Backend: Python Flask with modular services
- Database: PostgreSQL for data persistence
- Frontend: Bootstrap 5.3 with responsive design
- Authentication: Session-based secure login
- Integration: WhatsApp Business API for message processing

## WhatsApp Integration Status
- Webhook endpoint: /webhook/whatsapp (active)
- Auto-responses: DISABLED (silent analysis only)
- Client detection: Automated profile creation
- Message analysis: Sentiment, urgency, luxury indicators

## Database Schema
- Client profiles with 40+ fields
- Sales pipeline tracking
- Watch preferences and collection data
- Interaction history and notes
- Intelligence and sentiment analysis

## Security
- Secure authentication system
- Environment variable configuration
- Session management with timeouts
- Audit logging for all activities

## Export Date: """ + datetime.now().strftime('%Y-%m-%d %H:%M:%S') + """
## System Status: Fully Operational
"""
    
    with open('README.md', 'w') as f:
        f.write(readme_content)
    
    # Create the zip file
    zip_filename = f"CRC_Warroom_Export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
    
    # Files and directories to include
    include_patterns = [
        '*.py',
        '*.md',
        '*.json',
        '*.txt',
        '*.html',
        '*.css',
        '*.js',
        '*.toml',
        '*.lock',
        'templates/',
        'static/',
        'models/',
        'services/',
        'utils/',
        'data/',
        'conversation_log.json',
        'README.md'
    ]
    
    # Exclude patterns
    exclude_patterns = [
        '__pycache__/',
        '*.pyc',
        '.git/',
        'venv/',
        '.env',
        'attached_assets/',
        '*.xlsm',
        '*.xlsx',
        '*.zip'
    ]
    
    with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # Add all relevant files
        for root, dirs, files in os.walk('.'):
            # Skip excluded directories
            dirs[:] = [d for d in dirs if not any(d.startswith(exc.rstrip('/')) for exc in exclude_patterns)]
            
            for file in files:
                file_path = os.path.join(root, file)
                
                # Check if file should be included
                should_include = False
                for pattern in include_patterns:
                    if pattern.endswith('/'):
                        if file_path.startswith('./' + pattern) or file_path.startswith(pattern):
                            should_include = True
                            break
                    elif file.endswith(pattern.lstrip('*')) or file == pattern:
                        should_include = True
                        break
                
                # Check if file should be excluded
                should_exclude = False
                for pattern in exclude_patterns:
                    if pattern.endswith('/'):
                        if pattern.rstrip('/') in file_path:
                            should_exclude = True
                            break
                    elif file.endswith(pattern.lstrip('*')) or file == pattern:
                        should_exclude = True
                        break
                
                if should_include and not should_exclude:
                    # Add file to zip
                    arc_path = file_path.lstrip('./')
                    zipf.write(file_path, arc_path)
                    print(f"Added: {arc_path}")
    
    print(f"\n‚úÖ Export completed: {zip_filename}")
    print(f"üìÅ File size: {os.path.getsize(zip_filename) / 1024 / 1024:.2f} MB")
    
    return zip_filename

if __name__ == "__main__":
    create_project_zip()