Skip to main content
Building a Local AI Agent Like Manus
167,801 tokens

Model
ThinkingThoughts
(experimental)
Auto
Expand to view model thoughts

chevron_right
Model
ThinkingThoughts
(experimental)
Auto
Exploring Local AI Agents
I'm currently focused on deconstructing the user's request. My initial thought is to figure out the critical attributes. Building a local AI agent, like Manus, on a Windows laptop is the central challenge. The core aspect is local processing. That narrows down the requirements significantly. I'll need to explore constraints and opportunities within the local environment.
Pinpointing the Critical Elements
I've been drilling down on the user's core request. The key is local, autonomous processing. This clarifies the project's parameters. We need to focus on freely available local models and tools. The Manus-like capabilities present a fascinating challenge. This includes autonomous planning, document analysis, and computer interaction. I will need to zero in on free and private solutions for everything.
Outlining a Clear Path
I'm now focusing on a clear, structured response for the user. I'll outline a manageable path starting with basic tools. Considering the free and local requirements, I'm leaning toward Ollama, LangChain, and pyautogui for initial prototyping. This gives a balance between accessible tools and Manus-like features. I'm building a concise summary to provide actionable steps.
Mapping Out a Detailed Guide
I'm now charting a detailed guide for the user. I've broken down their needs. The core aspects include local processing, open-source resources, and Manus-like features. I'm focusing on providing practical steps to achieve these goals. This approach will be tailored to a beginner audience. It will prioritize clarity. I'll include clear examples. The user can start right away with a working project.
Developing a Clear Roadmap
I'm currently focused on structuring the response. I'll provide a concise, actionable roadmap for the user. The current focus is building an easy-to-follow guide, starting with an overview and then offering clear steps. I'm exploring an architecture overview for context and also specific, targeted answers to their concerns.
Formulating the Core Response
I've been concentrating on structuring the response into a beginner-friendly roadmap. I am drafting clear, actionable steps for building a local AI agent. The response will include code examples and address all user needs effectively. I'm focusing on the crucial tools, like AgenticSeek and LangChain, and their practical uses.
Formulating the Comprehensive Answer
I've been working on structuring the response into a comprehensive guide, ensuring it's clear and beginner-friendly. I'm prioritizing providing a solid foundation and addressing the user's specific concerns. I'll include practical examples and key tool recommendations. I'm focusing on the integration of tools like AgenticSeek and LangChain.
Collapse to hide model thoughts

chevron_right
Of course. Based on all the information provided, including the Reddit threads, project documentation (OpenManus, AgenticSeek), and your specific goals, here is a comprehensive, enhanced, and rewritten guide to build a powerful, free, and local AI agent on your Windows laptop.
This plan is designed to be a beginner-friendly roadmap that is realistic, cost-effective, and highly capable. We will focus on using AgenticSeek as the primary framework because it is the most mature, fully-featured, and local-first open-source option that directly aligns with your request for a Manus-like experience.
The Ultimate Roadmap: Building Your Local Manus-like AI Agent
This guide will walk you through setting up a powerful, self-learning AI agent named CLOSERT on your Windows laptop. It will be able to plan trips, analyze your documents, browse the web, and interact with your computer, all for free and with complete privacy.
Core Philosophy: Local-First, Open-Source Power
The Brain (LLM): We will use Ollama to run powerful open-source language models like Qwen2:7B (for general tasks) and LLaVA (for image analysis) directly on your laptop. This eliminates API costs entirely.
The Body (Agent Framework): We will use AgenticSeek, a project designed from the ground up to be a local, private alternative to Manus. It already has the core capabilities you need: web browsing, coding, and task planning.
The Hands (Tools): We will leverage AgenticSeek's built-in tools and show you how to extend them with custom Python functions for tasks like document analysis or computer control.
The Memory (Knowledge Base): We will use a local vector database (FAISS) to give your agent a persistent memory, allowing it to learn from your documents and past interactions.
Phase 1: Setting Up Your Local AI Environment
This is the foundational step. Your laptop will become a self-sufficient AI powerhouse.
1. Install Prerequisites:
Python 3.10: AgenticSeek is most stable with this version. Download it from the official Python website. During installation, make sure to check the box that says "Add Python to PATH".
Git: To clone the agent's code. Download from git-scm.com.
Docker Desktop: AgenticSeek uses Docker to manage some services easily. Download from Docker's website. After installing, start Docker Desktop and let it run in the background.
Ollama: This is your local LLM server. Download the Windows app from ollama.com and install it.
2. Download and Configure Your AI Models:
Open a new Command Prompt (or PowerShell).
Pull the models you'll need using Ollama. We'll start with a general model and a vision model.
code
Bash
ollama pull qwen2:7b
ollama pull llava
qwen2:7b is a powerful, medium-sized model great for reasoning and text generation. llava is a multimodal model that can understand images.
Phase 2: Installing and Configuring Your Agent (AgenticSeek)
Now we'll set up the agent framework itself.
1. Clone the AgenticSeek Repository:
Open Command Prompt in a folder where you want to store your project (e.g., C:\Users\YourUser\Documents).
Run the following commands:
code
Bash
git clone https://github.com/Fosowl/agenticSeek.git
cd agenticSeek
2. Configure the Agent:
Environment File: Rename the .env.example file to .env. You can do this in the Command Prompt: ren .env.example .env. Open this new .env file in a text editor like Notepad.
Set the WORK_DIR: This is a folder on your computer where the agent can read and write files. This is very important.
Example: WORK_DIR="C:/Users/YourUser/Documents/AI_Workspace" (Use forward slashes). Create this folder if it doesn't exist.
Configuration File (config.ini): Open the config.ini file in a text editor. This is the agent's main configuration. Make the following changes to ensure it runs 100% locally and for free:
code
Ini
[MAIN]
is_local = True
provider_name = ollama
provider_model = qwen2:7b
provider_server_address = http://127.0.0.1:11434
agent_name = CLOSERT
recover_last_session = True
save_session = True
speak = False  # Set to True later if you want text-to-speech
listen = False # Set to True for voice input in CLI mode

[BROWSER]
headless_browser = False
stealth_mode = True
3. Install Agent Dependencies:
While in the agenticSeek directory in your Command Prompt, run the installation script. This will set up all the necessary Python libraries.
code
Bash
install.bat
Phase 3: Running and Interacting with Your Agent
You're now ready to bring your agent to life.
1. Start the Required Services:
Make sure Docker Desktop is running.
In the agenticSeek directory in Command Prompt, run the services script. This starts the backend components like the web search tool.
code
Bash
start_services.cmd
A new terminal window will open and show logs. Keep this running in the background.
2. Run the Agent's Command-Line Interface (CLI):
Open a new Command Prompt window and navigate to the agenticSeek directory again.
Start the agent's main interface by running:
code
Bash
uv run cli.py
You will see a welcome message, and the agent is now ready for your commands!
3. Example Commands to Try:
Web Browsing & Planning: Plan a 3-day trip to Amsterdam, focusing on museums and local food. Save the itinerary to a file named amsterdam_trip.txt in my workspace.
Document Analysis:
Place a PDF file (e.g., my_report.pdf) in the AI_Workspace folder you created.
Tell the agent: Read the file 'my_report.pdf' and provide me with a 5-point summary.
Image Analysis:
Place an image (e.g., my_photo.jpg) in the workspace.
Tell the agent: Using the vision model, analyze the image 'my_photo.jpg' and describe what you see. (AgenticSeek may require specific prompting to switch to a vision model, or you may need to configure it).
Computer Interaction (Use with Caution):
Open the calculator application. (This uses tools that interact with your OS).
Phase 4: Enhancements and Advanced Customization
This is where you make the agent truly your own.
1. Enhancing with Custom Tools (Intermediate Python):
You can add your own Python functions as tools for the agent.
Open the sources/tools.py file in the AgenticSeek directory.
You can add a new function with the @tool decorator. For example, to get the current weather:
code
Python
# In sources/tools.py
from langchain.tools import tool
import requests

@tool
def get_weather(city: str) -> str:
    """Gets the current weather for a specified city."""
    try:
        # You would need a free weather API key for this
        api_key = "YOUR_FREE_WEATHER_API_KEY"
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
        response = requests.get(url).json()
        weather = response['weather'][0]['description']
        temp = response['main']['temp']
        return f"The current weather in {city} is {weather} with a temperature of {temp}Â°C."
    except Exception as e:
        return f"Could not retrieve weather: {e}"
You would then need to register this new tool within the agent's core logic so it knows it can use it.
2. Advice on Using Roo.Code (as requested):
Role of Roo.Code: Think of Roo.Code not as the agent itself, but as a powerful assistant for building the agent. Use it inside VS Code to write, debug, and refactor the Python code for your custom tools (like the weather tool above) or to modify AgenticSeek's core logic.
Workflow:
Open the agenticSeek folder in VS Code with the Roo.Code extension installed.
Open a file like sources/tools.py.
Use a prompt in Roo.Code like: "Refactor this file to include a new tool that uses the 'requests' library to get the price of Bitcoin from the CoinDesk API. Make sure to handle errors gracefully."
Roo.Code will write the code for you, which you can then integrate into your agent.
This approach provides a powerful, free, and completely local AI agent that lives on your laptop, respects your privacy, and can be extended to handle almost any task you can imagine.
56.0s
Use Arrow Up and Arrow Down to select a turn, Enter to jump to it, and Escape to return to the chat.
Start typing a prompt

Run
Ctrl
1




65536
0.95
