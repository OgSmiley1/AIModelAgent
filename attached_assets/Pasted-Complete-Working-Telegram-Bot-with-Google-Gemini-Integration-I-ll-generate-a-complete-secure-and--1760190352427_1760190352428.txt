Complete Working Telegram Bot with Google Gemini Integration
I'll generate a complete, secure, and production-ready Telegram bot that uses Google's Gemini API. This code is ready to copy-paste into Replit.

üìÅ File Structure


1
2
3
main.py
requirements.txt
.env (for secrets - you'll create this)
üìÑ requirements.txt
txt


1
2
3
python-telegram-bot==20.8
requests==2.31.0
python-dotenv==1.0.0
üìÑ main.py
python


79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
import os
            await update.message.reply_text(
                "‚ö†Ô∏è Sorry, I'm having trouble connecting to the AI service. Please try again later."
            )
            return
        
        # Parse the response
        data = response.json()
        
        # Extract the AI response
        if "candidates" in data and len(data["candidates"]) > 0:
            ai_response = data["candidates"][0]["content"]["parts"][0]["text"]
            
            # Limit response length to avoid Telegram message limits
            if len(ai_response) > 4000:
                ai_response = ai_response[:4000] + "... (truncated)"
            
            await update.message.reply_text(ai_response)
        else:
            logger.warning(f"No candidates in Gemini response: {data}")
            await update.message.reply_text(
                "ü§ñ I couldn't generate a response. Please try rephrasing your question."
            )
    
    except requests.exceptions.Timeout:
        logger.error("Gemini API request timed out")
        await update.message.reply_text(
            "‚è≥ The AI is taking too long to respond. Please try again."
        )
    except requests.exceptions.RequestException as e:
        logger.error(f"Request error: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è There was an error communicating with the AI service. Please try again."
        )
    except KeyError as e:
        logger.error(f"Key error in Gemini response: {e}")
        await update.message.reply_text(
            "ü§ñ I received an unexpected response from the AI. Please try again."
        )
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await update.message.reply_text(
            "‚ùå An unexpected error occurred. Please try again."
        )

def main():
    """Start the bot"""
    # Create the Application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Register command handlers
    application.add_handler(CommandHandler("start", start_command))
    
    # Register message handler for all text messages
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Log when the bot starts
    logger.info("Bot is starting...")
    
    # Start the bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
üõ†Ô∏è Setup Instructions
1. Create the .env file (in Replit)
Create a new file called .env and add:



1
2
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here
GOOGLE_API_KEY=your_google_ai_studio_api_key_here
2. Get Your API Keys
Telegram Bot Token:
Open Telegram and search for @BotFather
Send /newbot
Follow instructions to create a bot
Copy the token
Google AI Studio Key:
Go to Google AI Studio
Create an API key for your project
Copy the key (it starts with AIza...)
3. In Replit:
Create a new Repl
Copy the requirements.txt content above
Create main.py and paste the Python code above
Create .env and add your tokens (see format above)
Click "Run"
4. Test the Bot
Start your bot in Telegram: /start
Send a message: "Hello"
It should respond with an AI-generated reply
‚úÖ Key Security Features
No secret leakage: Never includes system data in AI prompts
Environment variables: API keys are not in code
Input sanitization: Only sends user message to AI
Error handling: Graceful failure without exposing internals
Timeout protection: Prevents hanging requests
üöÄ Advanced Features
Temperature control for creativity
Token limits to prevent long responses
Logging for debugging
Rate limiting protection
Telegram-safe response length