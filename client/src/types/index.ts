export interface DashboardStats {
  todayMessages: number;
  yesterdayMessages: number;
  messageGrowth: string;
  totalClients: number;
  activeChats: number;
  pendingReminders: number;
  avgResponseTime: string;
  conversionRate: number;
  satisfaction: string;
}

export interface LiveMessage {
  id: string;
  clientName: string;
  clientPhone: string;
  content: string;
  sentiment: 'positive' | 'neutral' | 'negative';
  timestamp: Date;
  urgency: 'low' | 'medium' | 'high' | 'urgent';
  intent?: string;
}

export interface AIMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

export interface SystemAlert {
  id: string;
  type: 'info' | 'warning' | 'error' | 'success';
  title: string;
  message: string;
  timestamp: Date;
  priority: 'low' | 'medium' | 'high';
}

export interface WhatsAppStatus {
  connected: boolean;
  accessToken: boolean;
  phoneNumberId: boolean;
  lastSync?: Date;
}

export interface ClientProfileData {
  id: string;
  name: string;
  phone?: string;
  email?: string;
  whatsappNumber?: string;
  status: 'prospect' | 'active' | 'inactive' | 'vip';
  priority: 'low' | 'medium' | 'high' | 'critical' | 'vip';
  interests?: string;
  lastInteraction?: Date;
  totalInteractions: number;
  sentimentScore: number;
  conversionStage: string;
  lifetimeValue: number;
  followUpRequired: boolean;
  followUpDate?: Date;
  notes?: string;
  tags?: string[];
  
  // AI-powered lead scoring and forecasting fields
  leadScore?: number;
  conversionProbability?: number;
  predictedValue?: number;
  engagementLevel?: 'low' | 'medium' | 'high' | 'very_high';
  buyingSignals?: string[];
  riskFactors?: string[];
  nextBestAction?: string;
  
  // Enhanced business information
  location?: string;
  budget?: number;
  timeframe?: 'immediate' | 'short_term' | 'medium_term' | 'long_term';
  decisionMaker?: boolean;
  
  // Tracking timestamps
  lastScoreUpdate?: Date;
  createdAt?: Date;
  updatedAt?: Date;
}

export interface ConversationData {
  id: string;
  clientId: string;
  platform: 'whatsapp' | 'email' | 'phone' | 'chat';
  messageCount: number;
  lastMessageAt?: Date;
  status: 'active' | 'closed' | 'archived';
  summary?: string;
  sentiment: 'positive' | 'neutral' | 'negative';
  sentimentScore: number;
  urgency: 'low' | 'medium' | 'high' | 'urgent';
}

export interface MessageData {
  id: string;
  conversationId: string;
  clientId: string;
  content: string;
  messageType: 'text' | 'image' | 'document' | 'audio' | 'video';
  direction: 'incoming' | 'outgoing';
  platform: 'whatsapp' | 'email' | 'phone' | 'chat';
  sentiment?: 'positive' | 'neutral' | 'negative';
  sentimentScore?: number;
  analyzed: boolean;
  autoGenerated: boolean;
  metadata?: Record<string, any>;
  timestamp: Date;
}

export interface FollowUpData {
  id: string;
  clientId: string;
  type: 'reminder' | 'call' | 'email' | 'meeting' | 'task';
  title: string;
  description?: string;
  scheduledFor: Date;
  completed: boolean;
  completedAt?: Date;
  priority: 'low' | 'medium' | 'high';
  automatedAction?: string;
}

export interface InteractionData {
  id: string;
  clientId: string;
  type: 'message' | 'call' | 'email' | 'meeting' | 'document_share' | 'trip_planning';
  summary?: string;
  outcome?: 'positive' | 'neutral' | 'negative' | 'follow_up_needed';
  sentiment?: 'positive' | 'neutral' | 'negative';
  duration?: number;
  value?: number;
  timestamp: Date;
}

export interface DocumentData {
  id: string;
  clientId?: string;
  filename: string;
  originalName: string;
  fileType: string;
  fileSize: number;
  filePath: string;
  category?: 'contract' | 'proposal' | 'invoice' | 'report' | 'image';
  tags?: string[];
  analyzed: boolean;
  analysisResults?: Record<string, any>;
  createdAt: Date;
}

export interface TripPlanData {
  id: string;
  clientId: string;
  title: string;
  destination: string;
  startDate?: Date;
  endDate?: Date;
  status: 'planning' | 'confirmed' | 'completed' | 'cancelled';
  budget?: number;
  itinerary?: Record<string, any>;
  preferences?: Record<string, any>;
  notes?: string;
}

export interface AIConversationData {
  id: string;
  userId: string;
  title?: string;
  messages: AIMessage[];
  context?: Record<string, any>;
  createdAt: Date;
  updatedAt: Date;
}

export interface SystemSettingData {
  id: string;
  key: string;
  value: any;
  category: string;
  description?: string;
}
